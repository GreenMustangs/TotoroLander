//TreeBackground draws all the trees in GamePanel
//similar to SimpleWindow
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;

import javax.swing.*;

public class TreeBackground extends JPanel implements KeyListener {

	private MovingImage[] trees;
	private Totoro totororo;
	
	public TreeBackground()
	{
		super();
		
		trees = new MovingImage[1000];//initialize array trees
		totororo = new Totoro(640 * 2 / 2 + 25, 0);
	}
	
	public void paintComponent(Graphics g)
	{
	    super.paintComponent(g);  // Call JPanel's paintComponent method to paint the background
	    int width = getWidth();
	    int height = getHeight();
	    double ratioX = width/(640.0*3);//original: 640
	    double ratioY = height/(480.0*3);//original: 480
	    
	    Graphics2D g2 = (Graphics2D)g;
	    g2.scale(ratioX, ratioY);
	    AffineTransform at = g2.getTransform();

	    totororo.draw(g2, this);
	    	    
	    // CALL THE DRAW METHOD ON ALL TREES
	    for(int i = 0; i < trees.length; i++)
	    {
		    if(trees[i] != null)
		    {
		    	trees[i].draw(g, this);
		    }
		}
	    g2.setTransform(at);
	}
	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	public static void main(String[] args)
	  {
	    JFrame w = new JFrame("Simple Window");
	    w.setBounds(100, 100, 640 * 2, 480 * 2);
	    w.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    TreeBackground panel = new TreeBackground();
	    w.addKeyListener(panel);
	    w.add(panel);
	    w.setResizable(true);
	    w.setVisible(true);
	    
	    panel.run();
	}
	
	  public void run() {
		  	while(true) {
		  		// MAKE A CHANGE
		  		int randomInt = (int)(3 * Math.random() + 1);
			    if(randomInt == 1)
			    {
			    	MovingImage tree = new MovingImage("tree1.png", 680 * 3, 480 * 3 - 100, 50, 100);// MAKE A NEW TREE
			    	for(int i = 0; i < trees.length; i++)// PUT THE TREE IN YOUR ARRAY
			    	{
			    		if(trees[i] == null)
			    		{
			    			trees[i] = tree;
			    			i++;
			    			break;
			    			
			    		}
			    	}
			    }
			    else if(randomInt == 2)
			    {
			    	MovingImage tree = new MovingImage("tree2.png", 680 * 3, 480 * 3 - 100, 50, 100);// MAKE A NEW TREE
			    	for(int i = 0; i < trees.length; i++)// PUT THE TREE IN YOUR ARRAY
			    	{
			    		if(trees[i] == null)
			    		{
			    			trees[i] = tree;
			    			i++;
			    			break;
			    		}
			    	}
			    }
			    else if(randomInt == 3)
			    {
			    	MovingImage tree = new MovingImage("tree3.png", 680 * 3, 480 * 3 - 100, 50, 100);// MAKE A NEW TREE
			    	for(int i = 0; i < trees.length; i++)// PUT THE TREE IN YOUR ARRAY
			    	{
			    		if(trees[i] == null)
			    		{
			    			trees[i] = tree;
			    			i++;
			    			break;
			    		}
			    	}
			    }
			    
			    
			    // MOVE ALL TREES
			    for(int x = 0; x < trees.length; x++)
			    {
			    	if(trees[x] != null)
			    	{
			    		trees[x].moveByAmount(-40);
			    	}
			    }
		  		
		  		// SHOW THE CHANGE
	    		repaint();
			    
			    
		  		// WAIT
		  		try {
					Thread.sleep(200);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		  		
		  	}
		  }


	
}

