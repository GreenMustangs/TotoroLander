//TreeBackground draws all the trees in GamePanel
//similar to SimpleWindow
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;

import javax.swing.*;

public class TreeBackground extends JPanel implements KeyListener, ActionListener {
	
	private MovingImage[] trees;
	private Totoro totororo;
	public static final int heightOfTree = 150;
	private final int widthOfScreen = 640 * 2;
	private final int XOfTree = 680 * 2;
	private final int YOfTree = 480 * 2 - heightOfTree;
	private final int widthOfTree = 50;
	private int heightOfScreen = 480 * 2;
	private final int numOfTrees = widthOfScreen/ widthOfTree;
	private Timer timer;
	private TotoroApp app;

	public TreeBackground(TotoroApp app)
	{
		super();
		setBackground(Color.CYAN);
		trees = new MovingImage[1000];//initialize array trees
		
		this.setFocusable(true);
		
		this.addKeyListener(this);

		this.app = app;
		
		 MovingImage tree;
	    for(int i = 0; i < trees.length; i++)// PUT THE TREE IN YOUR ARRAY
	    {
	    	int randomInt = (int)(3 * Math.random() + 1);
	    	if(randomInt == 1) {
	    	    	tree = new MovingImage("tree1.png", (i - 500) * widthOfTree , YOfTree, widthOfTree, heightOfTree);// MAKE A NEW TREE
	    	} else if (randomInt == 2) {
	    		tree = new MovingImage("tree2.png", (i - 500) * widthOfTree, YOfTree, widthOfTree, heightOfTree);// MAKE A NEW TREE
	    	} else {
	    		tree = new MovingImage("tree3.png", (i - 500) * widthOfTree, YOfTree, widthOfTree, heightOfTree);// MAKE A NEW TREE
	    	}
	    	
	    	
	    		trees[i] = tree;
	    	
	    } 
	  
	}

	public void paintComponent(Graphics g)
	{
	    super.paintComponent(g);  // Call JPanel's paintComponent method to paint the background
	    int width = getWidth();
	    int height = getHeight();
	    double ratioX = width/(640.0*2);//original: 640
	    double ratioY = height/(480.0*2);//original: 480

	    Graphics2D g2 = (Graphics2D)g;
	    g2.scale(ratioX, ratioY);
	    AffineTransform at = g2.getTransform();
	    g2.setTransform(at);

	    totororo.draw(g2, this);
	    

	    // CALL THE DRAW METHOD ON ALL TREES
	    for(int i = 0; i < trees.length; i++)
	    {
		    if(trees[i] != null)
		    {
		    	trees[i].draw(g, this);
		    }
		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		if(e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
		    for(int j = 0; j < trees.length; j++)
		    {
		    	if(trees[j] != null)
		    	{
		    		trees[j].moveByAmount(-10, 0);
		    	}
		    }
		}
		else if(e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			for(int j = 0; j < trees.length; j++)
		    {
		    	if(trees[j] != null)
		    	{
		    		trees[j].moveByAmount(10, 0);
		    	}
		    }
		}
		else if(e.getKeyCode() == KeyEvent.VK_UP)
		{
			totororo.goSlower(10);
		}
		else if(e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			totororo.goFaster(10);
		}
		this.repaint();
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}
	
	public void startGame() {
		totororo = new Totoro(640 * 2 / 2 - 25, 0);
		timer = new Timer(500, this);
		timer.start();
		
	}
	
	public void endGame() {
		timer.stop();
		app.gotToResults(totororo);
		
	}

		  	

	@Override
	public void actionPerformed(ActionEvent e) {
		   
		    if (!totororo.checkEndOfGame()) {
			   repaint();
			   endGame();
		   } 
 			totororo.fall(heightOfScreen - heightOfTree - 100);

		    // MOVE ALL TREES
		    for(int x = 0; x < trees.length; x++)
		    {
		    	if(trees[x] != null)
		    	{
		    		trees[x].moveByAmount(-4, 0);
		    	}
		    }
		    
	  		// SHOW THE CHANGE
    		repaint();
	}



}
