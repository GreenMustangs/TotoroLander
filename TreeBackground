//TreeBackground draws all the trees in GamePanel
//similar to SimpleWindow
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;

import javax.swing.*;

public class TreeBackground extends JPanel implements KeyListener {

	private MovingImage[] trees;
	public Totoro totororo;
	private static final int heightOfTree = 100;
	private final int widthOfScreen = 640 * 2;
	private final int XOfTree = 680 * 2;
	private final int YOfTree = 480 * 2 - heightOfTree;
	private final int widthOfTree = 50;
	private int heightOfScreen = 480 * 2;
	private final int numOfTrees = widthOfScreen/ widthOfTree;
	private boolean paused;

	public TreeBackground()
	{
		super();
		setBackground(Color.CYAN);
		trees = new MovingImage[100];//initialize array trees
		totororo = new Totoro(640 * 2 / 2 - 25, 0);
		this.setFocusable(true);

		this.addKeyListener(this);
		paused = true;
	}

	public void paintComponent(Graphics g)
	{
	    super.paintComponent(g);  // Call JPanel's paintComponent method to paint the background
	    int width = getWidth();
	    int height = getHeight();
	    double ratioX = width/(640.0*2);//original: 640
	    double ratioY = height/(480.0*2);//original: 480

	    Graphics2D g2 = (Graphics2D)g;
	    g2.scale(ratioX, ratioY);
	    AffineTransform at = g2.getTransform();
	    
	    totororo.draw(g, this);

	    // CALL THE DRAW METHOD ON ALL TREES
	    for(int i = 0; i < trees.length; i++)
	    {
		    if(trees[i] != null)
		    {
		    	trees[i].draw(g, this);
		    }
		}
	    g2.setTransform(at);
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		if(e.getKeyCode() == KeyEvent.VK_RIGHT)
		{
		    for(int j = 0; j < trees.length; j++)
		    {
		    	if(trees[j] != null)
		    	{
		    		trees[j].moveByAmount(-10, 0);
		    	}
		    }
		}
		else if(e.getKeyCode() == KeyEvent.VK_LEFT)
		{
			for(int j = 0; j < trees.length; j++)
		    {
		    	if(trees[j] != null)
		    	{
		    		trees[j].moveByAmount(10, 0);
		    	}
		    }
		}
		else if(e.getKeyCode() == KeyEvent.VK_UP)
		{
			totororo.goSlower(10);
		}
		else if(e.getKeyCode() == KeyEvent.VK_DOWN)
		{
			totororo.goFaster(10);
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}
	
	public void startGame() {
		paused = false;
	}
	
	public void run()
	{
		int whatever = -1000;
	  	while(true) {
	  		// MAKE A CHANGE
	  		
	  		if (!paused) {
		  		MovingImage tree = null;
		  		int randomInt = (int)(3 * Math.random() + 1);
			    if(randomInt == 1)
			    {
			    	tree = new MovingImage("tree1.png", 640 * 2 - whatever, 480 * 2 - 100, 50, 100);// MAKE A NEW TREE			    	
			    }
			    else if(randomInt == 2)
			    {
			    	tree = new MovingImage("tree2.png", 640 * 2 - whatever, 480 * 2 - 100, 50, 100);// MAKE A NEW TREE
			    }
			    else if(randomInt == 3)
			    {
			    	tree = new MovingImage("tree3.png", 640 * 2 - whatever, 480 * 2 - 100, 50, 100);// MAKE A NEW TREE 	
			    }
			    for(int i = 0; i < trees.length; i++)// PUT THE TREE IN YOUR ARRAY
		    	{
		    		if(trees[i] == null)
		    		{
		    			trees[i] = tree;
		    			break;
		    		}
		    	}
			    whatever += 40;
			    for(int i = 0; i < trees.length; i++)
		  		{
		  			totororo.fall(trees[i]);
		  			break;
		  		}

	  		}
	  		// SHOW THE CHANGE
    		repaint();
    		try {
			Thread.sleep(20);
    		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	}
}



