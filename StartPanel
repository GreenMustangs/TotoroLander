import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.AffineTransform;

import javax.swing.*;

/**
   TODO Write a one-sentence summary of your class here.
   TODO Follow it with additional details about its purpose, what abstraction
   it represents, and how to use it.

   @author  TODO Your Name
   @version TODO Date

   Period - TODO Your Period
   Assignment - TODO Name of Assignment

   Sources - TODO list collaborators
 */
public class StartPanel extends JPanel implements  ActionListener  
{
	private JButton startButton;
	private JButton goToInstructionsButton;
	private int wOfButton = 200;
	private int hOfButton = 70;
	private Timer timer;
	
	TotoroApp game1;
	TotoroApp instructions1;
	 
  public StartPanel (TotoroApp game, TotoroApp instructions) {
	  
	  super();
	  setBackground(Color.CYAN);
	  
	  game1 = game;
	  instructions1 = instructions;
	  
	  this.setLayout(null);
	 
	  startButton = new JButton("Click Here To START");
	  goToInstructionsButton = new JButton("Click For Instructions");
	  	 
	 startButton.addMouseListener(new MouseListener() {
		
		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mouseClicked(MouseEvent e) {
			endChangeColor();
			game1.showBackground();
			
		}
	});
	 goToInstructionsButton.addMouseListener(new MouseListener() {
		
		@Override
		public void mouseReleased(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mousePressed(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mouseExited(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mouseEntered(MouseEvent e) {
			// TODO Auto-generated method stub
			
		}
		
		@Override
		public void mouseClicked(MouseEvent e) {
			instructions1.showInstructions();
		}
	});
		
	  add(startButton);
	  add(goToInstructionsButton);
	  startButton.setVisible(true);
	  goToInstructionsButton.setVisible(true);
  }

  public void paintComponent(Graphics g)
  {
    super.paintComponent(g);  // Call JPanel's paintComponent method to paint the background

    int width = getWidth();
    int height = getHeight();
    
    double ratioX = (double)width / (640 * 2);
    double ratioY = height / (480.0 * 2);
    
    Graphics2D g2 = (Graphics2D)g;
    AffineTransform at = g2.getTransform();
    g2.scale(ratioX, ratioY);
    
    int fontSize = 150;
    int topOfText = 200;
    String text = "Totoro Lander";
    // get metrics from the graphics
    Font font = new Font("Monospaced", Font.BOLD, fontSize);
    FontMetrics metrics = g.getFontMetrics(font);
    // get the height of a line of text in this
    // font and render context
    int hgt = metrics.getHeight();
    // get the advance of my text in this font
    // and render context
    int adv = metrics.stringWidth(text);
    // calculate the size of a box to hold the
    // text with some padding.
    Dimension size = new Dimension(adv+2, hgt+2);
  
    int wOfText = (int)(size.width * ratioX);
    int hOfText = (int)(size.height * ratioY);
    
	g.setFont(font);
	g.setColor(new Color(0, 125, 125));
	g.drawString(text, width/2 - wOfText/2, topOfText);
	
	int buttonX = getWidth()/2 - wOfButton/2;
	int buttonY = getHeight()/2 - hOfButton/2;
	
	int wOfButton1 = 200;
	int hOfButton1 = 70;
	int buttonX1 = getWidth() - wOfButton;
	int buttonY1 = 0;
	  
	startButton.setBounds(buttonX, buttonY, wOfButton, hOfButton);
	goToInstructionsButton.setBounds(buttonX1, buttonY1, wOfButton1, hOfButton1);
	
	g2.setTransform(at);
  }
  
  public void startChangeColor() {
		
		timer = new Timer(1000, this);
		timer.start();
		
	}
	
	public void endChangeColor() {
		timer.stop();
	}

@Override
public void actionPerformed(ActionEvent arg0) {
	       startButton.setOpaque(true);
           startButton.setBorderPainted(false);
	
	     double randomIntforC = Math.random();
	     
		 if (randomIntforC <= 0.25) {
			  startButton.setBackground(Color.ORANGE);
		  } 
		  if (randomIntforC >= 0.26 && randomIntforC <= 0.50) {
			  startButton.setBackground(Color.GREEN);
		  }
		  if (randomIntforC >= 0.51 && randomIntforC >= 0.75) {
			  startButton.setBackground(Color.PINK);
		  }
		  if (randomIntforC >= 0.76) {
			  startButton.setBackground(Color.MAGENTA);
		  }
		  randomIntforC = Math.random();
		  repaint();
		 
}

}
